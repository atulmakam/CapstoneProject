{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **allcourses.csv Cleaning**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This script is to clean and take a look at the *allcourses.csv* file. We check the null values, correct the typos and impute missing values if necessary."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### **--Important Rules, Please Follow--**  \n",
    "For tracking and organizing purpose, please comment your name in every cell you write and make necessary explanations for others to follow.\n",
    "Also, do not include codes in one cell from more than one person or modify others' code without notifying them. If you need to add something, add a new cell or make your own copy."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **Summary**\n",
    "1. [(→)](#1.-Explore-Data) Have a look at the data and explore it.\n",
    "2. [(→)](#2.-Semester_Type:-Fix-Typo) Fix the typo which are easy to identify in the column *semester_type* (i.e. pring, sprnig should be spring).\n",
    "3. [(→)](#3.-Semester_Type:-Change-Unidentifiable-Values) Fix the other values in the column *semester_type* that are not fall, spring, or summer by looking into the raw file (like SC491).\\\n",
    "Considering change the values to *Unknown* because there are only few of them, or belong to different academic term systems, or hard to identify.\n",
    "4. [(→)](#4.-Course_Letter_Grade:-Merge-Values) For column *course_letter_grade*, merge grades (i.e. A+, A, and A- all belong to A) or convert them from different grading systems (i.e. OESNU equal to ABCDF).\\\n",
    "<https://en.wikipedia.org/wiki/Academic_grading_in_the_United_States>\n",
    "5. [(→)](#5.-Course_Letter_Grade:-Change-Unidentifiable-Values) Change the unidentifiable values to *Unknown* in column *course_letter_grade*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Irene\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "pd.set_option('display.precision',10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### **1. Explore Data**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] File b'allcourses.csv' does not exist: b'allcourses.csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-4-4bccab1e5810>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Irene\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mallcourses\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'allcourses.csv'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlow_memory\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mallcourses\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36mparser_f\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision)\u001b[0m\n\u001b[1;32m    683\u001b[0m         )\n\u001b[1;32m    684\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 685\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    686\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    687\u001b[0m     \u001b[0mparser_f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    455\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    456\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 457\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfp_or_buf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    458\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    459\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1133\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"c\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1134\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"c\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1135\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCParserWrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1136\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1137\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"python\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m   1915\u001b[0m         \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"usecols\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0musecols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1916\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1917\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparsers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTextReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1918\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1919\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader.__cinit__\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._setup_parser_source\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] File b'allcourses.csv' does not exist: b'allcourses.csv'"
     ]
    }
   ],
   "source": [
    "# Irene\n",
    "allcourses = pd.read_csv('allcourses.csv', low_memory=False)\n",
    "df = allcourses.copy()\n",
    "df.sample(n=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>study_id</th>\n",
       "      <th>district</th>\n",
       "      <th>school_year</th>\n",
       "      <th>semester_type</th>\n",
       "      <th>course_id</th>\n",
       "      <th>course_title</th>\n",
       "      <th>course_letter_grade</th>\n",
       "      <th>course_number_grade</th>\n",
       "      <th>ib_indicator</th>\n",
       "      <th>ap_indicator</th>\n",
       "      <th>cte_indicator</th>\n",
       "      <th>de_indicator</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>1.1227385000e+07</td>\n",
       "      <td>1.1227385000e+07</td>\n",
       "      <td>1.1223210000e+07</td>\n",
       "      <td>5468839</td>\n",
       "      <td>11221326</td>\n",
       "      <td>11227383</td>\n",
       "      <td>11223230</td>\n",
       "      <td>807594.0000000000</td>\n",
       "      <td>3.2095430000e+06</td>\n",
       "      <td>3.1952770000e+06</td>\n",
       "      <td>3.3726030000e+06</td>\n",
       "      <td>3.1272930000e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>unique</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>170</td>\n",
       "      <td>11063</td>\n",
       "      <td>34308</td>\n",
       "      <td>59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>top</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S1</td>\n",
       "      <td>9414000.0</td>\n",
       "      <td>Advisory 1</td>\n",
       "      <td>A</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>freq</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021481</td>\n",
       "      <td>245844</td>\n",
       "      <td>239507</td>\n",
       "      <td>3205930</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>8.5396707415e+12</td>\n",
       "      <td>3.6457433320e+00</td>\n",
       "      <td>2.0150951281e+03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11.9275762326</td>\n",
       "      <td>4.8486965278e-02</td>\n",
       "      <td>7.9952692677e-02</td>\n",
       "      <td>1.8321189894e-01</td>\n",
       "      <td>2.8473827045e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>5.6333308195e+13</td>\n",
       "      <td>1.4892096205e+00</td>\n",
       "      <td>1.6625188280e+00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.8020272085</td>\n",
       "      <td>2.1479290922e-01</td>\n",
       "      <td>2.7121998937e-01</td>\n",
       "      <td>3.8684020395e-01</td>\n",
       "      <td>1.6632220857e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>1.1115200000e+05</td>\n",
       "      <td>1.0000000000e+00</td>\n",
       "      <td>1.9990000000e+03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0000000000</td>\n",
       "      <td>0.0000000000e+00</td>\n",
       "      <td>0.0000000000e+00</td>\n",
       "      <td>0.0000000000e+00</td>\n",
       "      <td>0.0000000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>1.0149661616e+11</td>\n",
       "      <td>3.0000000000e+00</td>\n",
       "      <td>2.0140000000e+03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0000000000</td>\n",
       "      <td>0.0000000000e+00</td>\n",
       "      <td>0.0000000000e+00</td>\n",
       "      <td>0.0000000000e+00</td>\n",
       "      <td>0.0000000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>1.5261523426e+12</td>\n",
       "      <td>4.0000000000e+00</td>\n",
       "      <td>2.0150000000e+03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14.0000000000</td>\n",
       "      <td>0.0000000000e+00</td>\n",
       "      <td>0.0000000000e+00</td>\n",
       "      <td>0.0000000000e+00</td>\n",
       "      <td>0.0000000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>1.5261522201e+13</td>\n",
       "      <td>5.0000000000e+00</td>\n",
       "      <td>2.0160000000e+03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>16.0000000000</td>\n",
       "      <td>0.0000000000e+00</td>\n",
       "      <td>0.0000000000e+00</td>\n",
       "      <td>0.0000000000e+00</td>\n",
       "      <td>0.0000000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>2.6262323253e+15</td>\n",
       "      <td>5.0000000000e+00</td>\n",
       "      <td>2.0200000000e+03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.0000000000</td>\n",
       "      <td>1.0000000000e+00</td>\n",
       "      <td>1.0000000000e+00</td>\n",
       "      <td>1.0000000000e+00</td>\n",
       "      <td>1.0000000000e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                study_id          district       school_year semester_type  \\\n",
       "count   1.1227385000e+07  1.1227385000e+07  1.1223210000e+07       5468839   \n",
       "unique               NaN               NaN               NaN           170   \n",
       "top                  NaN               NaN               NaN            S1   \n",
       "freq                 NaN               NaN               NaN       2021481   \n",
       "mean    8.5396707415e+12  3.6457433320e+00  2.0150951281e+03           NaN   \n",
       "std     5.6333308195e+13  1.4892096205e+00  1.6625188280e+00           NaN   \n",
       "min     1.1115200000e+05  1.0000000000e+00  1.9990000000e+03           NaN   \n",
       "25%     1.0149661616e+11  3.0000000000e+00  2.0140000000e+03           NaN   \n",
       "50%     1.5261523426e+12  4.0000000000e+00  2.0150000000e+03           NaN   \n",
       "75%     1.5261522201e+13  5.0000000000e+00  2.0160000000e+03           NaN   \n",
       "max     2.6262323253e+15  5.0000000000e+00  2.0200000000e+03           NaN   \n",
       "\n",
       "        course_id course_title course_letter_grade  course_number_grade  \\\n",
       "count    11221326     11227383            11223230    807594.0000000000   \n",
       "unique      11063        34308                  59                  NaN   \n",
       "top     9414000.0   Advisory 1                   A                  NaN   \n",
       "freq       245844       239507             3205930                  NaN   \n",
       "mean          NaN          NaN                 NaN        11.9275762326   \n",
       "std           NaN          NaN                 NaN         6.8020272085   \n",
       "min           NaN          NaN                 NaN         0.0000000000   \n",
       "25%           NaN          NaN                 NaN         3.0000000000   \n",
       "50%           NaN          NaN                 NaN        14.0000000000   \n",
       "75%           NaN          NaN                 NaN        16.0000000000   \n",
       "max           NaN          NaN                 NaN        21.0000000000   \n",
       "\n",
       "            ib_indicator      ap_indicator     cte_indicator      de_indicator  \n",
       "count   3.2095430000e+06  3.1952770000e+06  3.3726030000e+06  3.1272930000e+06  \n",
       "unique               NaN               NaN               NaN               NaN  \n",
       "top                  NaN               NaN               NaN               NaN  \n",
       "freq                 NaN               NaN               NaN               NaN  \n",
       "mean    4.8486965278e-02  7.9952692677e-02  1.8321189894e-01  2.8473827045e-02  \n",
       "std     2.1479290922e-01  2.7121998937e-01  3.8684020395e-01  1.6632220857e-01  \n",
       "min     0.0000000000e+00  0.0000000000e+00  0.0000000000e+00  0.0000000000e+00  \n",
       "25%     0.0000000000e+00  0.0000000000e+00  0.0000000000e+00  0.0000000000e+00  \n",
       "50%     0.0000000000e+00  0.0000000000e+00  0.0000000000e+00  0.0000000000e+00  \n",
       "75%     0.0000000000e+00  0.0000000000e+00  0.0000000000e+00  0.0000000000e+00  \n",
       "max     1.0000000000e+00  1.0000000000e+00  1.0000000000e+00  1.0000000000e+00  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Irene\n",
    "df.describe(include='all')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "study_id                      0\n",
       "district                      0\n",
       "school_year                4175\n",
       "semester_type           5758546\n",
       "course_id                  6059\n",
       "course_title                  2\n",
       "course_letter_grade        4155\n",
       "course_number_grade    10419791\n",
       "ib_indicator            8017842\n",
       "ap_indicator            8032108\n",
       "cte_indicator           7854782\n",
       "de_indicator            8100092\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Irene\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "study_id\n",
      "[1.11152000e+05 1.11154000e+05 1.11158000e+05 ... 1.82526131e+15\n",
      " 1.82541518e+14 1.52126153e+14]\n",
      "\n",
      "district\n",
      "[1 2 3 4 5]\n",
      "\n",
      "school_year\n",
      "[2017. 2015. 2016. 2018. 2019. 2013. 2014. 2011. 2012. 2010. 2009. 2008.\n",
      " 2007. 2006. 2005. 2020. 2003. 2004. 1999.   nan]\n",
      "\n",
      "semester_type\n",
      "['Spring' 'Fall' 'Sum' 'SUM' 'S1' 'S2' 'SPRING' nan 'Summer' 'Sum 1'\n",
      " '1 Sum' '2 Sum' 'Sum 2' 'YR' 'FAll' 'fall' 'FALL' 'Term 1' 'Term 2'\n",
      " 'Term 3' 'spring' 'Qtr 1' 'Qtr 2' 'Qtr 3' 'Qtr 4' 'Fa;;' 'Sumr' 'Sum1'\n",
      " '1' '2' '3' 'SUMMER' 'Summ' 'Q4' 'Year' 'Sum II' '5' '2 SUM' 'Q3' 'all'\n",
      " 'Sum I' 'Speing' 'Fal' 'Sprin' 'Sum2' '11' 'summer' 'sPRING' 'Fa15'\n",
      " 'Fa14' 'SPRNG' 'Q2' 'Fallo' 'Sping' 'Sprig' 'sum' 'Sring' 'SUMM' 'Si' 'F'\n",
      " 'Term 4' 'SUM1' 'Fall1' 'FaLL' 'Sem1' '2Sum' 'Sum Sc' 'Falll' '4' '1 sum'\n",
      " 'Sem 2' 'sem 1' 'Sem2' 'Q1' 'Spri8n' 'fALL' 'Fal1' 'Sprng' 'Term 5'\n",
      " 'Term 6' 'Q5' 's1' 'SEM' 'Su' 'SUm' 'Fallk' '2014' '1Sum' 'SPring'\n",
      " 'sprng' 'Flall' 'Summr' 'Spirng' 'Spriin' 'Fal15' 'Fakk' 'Spsrin' 'pring'\n",
      " 'sSUM' 'T1' 'Sem 1' 'Sun' 'T3' 'T2' 'sping' 'sprinf' '1 summ' 'T4' '2011'\n",
      " 'Srping' 'S3' 'Fll' 'faLL' 'Sprinf' 'SU' 'D[tomh' 'TR1' 'TR2' 'TR3' 'Sem'\n",
      " 'regula' 'Regula' 'Reg' 'Tri 3' 'Tri 1' 'Tri 2' 'Fa;ll' 'Qtr. 1' 'Qtr. 3'\n",
      " 'S[romg' \"Fall'\" '1 Summ' 'D|Fall' 'Qtr' '12' 's2' 'Su15' 'Summe' 'SUMI'\n",
      " 'qTR 3' 'YEar' 'Su16' 'he99' '1 S' 'S-1' 'ring' '2013' 'Sprikn' 'All'\n",
      " 'Su 15' 'B3' 'B4' 'Soring' '1  Sum' '10' 'Fasll' 'SC491' 'Falls' 'Sprimg'\n",
      " 'fA15' 'Apring' 'FA10' 'SUM2' 'SA' 'SS' 'SUM 1' 'Sw' 'S4' 'FA' 'summ'\n",
      " 'year']\n",
      "\n",
      "course_id\n",
      "['PE502' 'MA271' 'AR40' ... 'ABC 121-0006 (40141)' 'AJS 230' 'AJS 275']\n",
      "\n",
      "course_title\n",
      "['AA Interscholastic Athletics (Sports)' 'Algebra I'\n",
      " 'Beginning Stained Glass' ... 'FireFight/EMS(Function of Cammand)'\n",
      " 'FireFight/EMS(Firegorund Survival)' 'FireFight/EMS(Precalculus)']\n",
      "\n",
      "course_letter_grade\n",
      "['A' 'B' 'C' 'P' 'D' 'F' 'D-' 'W' 'NC' 'W/P' 'W/F' 'N/C' 'U' 'I' 'W/D'\n",
      " 'C-' 'AUD' 'B-' 'N' 'A-' 'C+' 'D+' 'B+' 'A+' 'WAV' '0' 'NM' 'NG' 'NR'\n",
      " 'IP' 'NP' 'IN' 'AU' 'WF' 'E' 'INC' 'CR' 'RPT' 'LC' 'R' nan 'WD' 'WP' 'RP'\n",
      " 'O' 'I NC' 'S' 'AC' 'D(NC)' \"A'\" 'NS' 'G' 'V' '6' 'INF' 'DC' 'N/P' '9'\n",
      " 'CREDIT' 'WITHDREW']\n",
      "\n",
      "course_number_grade\n",
      "[nan 16. 21.  3. 14.  2. 11.  4.  1.  0.]\n",
      "\n",
      "ib_indicator\n",
      "[nan  1.  0.]\n",
      "\n",
      "ap_indicator\n",
      "[nan  1.  0.]\n",
      "\n",
      "cte_indicator\n",
      "[nan  1.  0.]\n",
      "\n",
      "de_indicator\n",
      "[nan  1.  0.]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Irene\n",
    "\n",
    "# trim the leading and trailing space of values\n",
    "df[['course_id', 'course_title']] = df[['course_id', 'course_title']].applymap(lambda x: x.strip() if isinstance(x, str) else x)\n",
    "\n",
    "# show the unique values of each column\n",
    "for c in df.columns:\n",
    "    print(c)\n",
    "    print(df[c].unique())\n",
    "    print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### **2. Semester_Type: Fix Typo**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>semester_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>NaN</td>\n",
       "      <td>5758546</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>s1</td>\n",
       "      <td>2021498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>s2</td>\n",
       "      <td>1976797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>fall</td>\n",
       "      <td>725351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>spring</td>\n",
       "      <td>704365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>sum sc</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>he99</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>fasll</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>sc491</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2sum</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>133 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        semester_type\n",
       "NaN           5758546\n",
       "s1            2021498\n",
       "s2            1976797\n",
       "fall           725351\n",
       "spring         704365\n",
       "...               ...\n",
       "sum sc              1\n",
       "he99                1\n",
       "fasll               1\n",
       "sc491               1\n",
       "2sum                1\n",
       "\n",
       "[133 rows x 1 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Irene\n",
    "\n",
    "# lowercase the values\n",
    "df['semester_type'] = df['semester_type'].str.lower()\n",
    "# show the values along with the counts\n",
    "pd.DataFrame(data=df['semester_type'].value_counts(dropna=False))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "133\n",
      "['spring', 'fall', 'sum', 's1', 's2', nan, 'summer', 'sum 1', '1 sum', '2 sum', 'sum 2', 'yr', 'term 1', 'term 2', 'term 3', 'qtr 1', 'qtr 2', 'qtr 3', 'qtr 4', 'fa;;', 'sumr', 'sum1', '1', '2', '3', 'summ', 'q4', 'year', 'sum ii', '5', 'q3', 'all', 'sum i', 'speing', 'fal', 'sprin', 'sum2', '11', 'fa15', 'fa14', 'sprng', 'q2', 'fallo', 'sping', 'sprig', 'sring', 'si', 'f', 'term 4', 'fall1', 'sem1', '2sum', 'sum sc', 'falll', '4', 'sem 2', 'sem 1', 'sem2', 'q1', 'spri8n', 'fal1', 'term 5', 'term 6', 'q5', 'sem', 'su', 'fallk', '2014', '1sum', 'flall', 'summr', 'spirng', 'spriin', 'fal15', 'fakk', 'spsrin', 'pring', 'ssum', 't1', 'sun', 't3', 't2', 'sprinf', '1 summ', 't4', '2011', 'srping', 's3', 'fll', 'd[tomh', 'tr1', 'tr2', 'tr3', 'regula', 'reg', 'tri 3', 'tri 1', 'tri 2', 'fa;ll', 'qtr. 1', 'qtr. 3', 's[romg', \"fall'\", 'd|fall', 'qtr', '12', 'su15', 'summe', 'sumi', 'su16', 'he99', '1 s', 's-1', 'ring', '2013', 'sprikn', 'su 15', 'b3', 'b4', 'soring', '1  sum', '10', 'fasll', 'sc491', 'falls', 'sprimg', 'apring', 'fa10', 'sa', 'ss', 'sw', 's4', 'fa']\n"
     ]
    }
   ],
   "source": [
    "# Irene\n",
    "\n",
    "# show the unique values\n",
    "semester_type = [s for s in df['semester_type'].unique()]\n",
    "print(len(semester_type))\n",
    "print(semester_type)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Irene\n",
    "\n",
    "# lists of typos that should be assigned to the correct terms\n",
    "spring = ['spring', 's2', 'speing', 'sprin', 'sprng', 'sping', 'sprig', 'sring', 'spri8n', 'spirng', 'spriin', 'spsrin', 'pring', 'sprinf', 'd[tomh', \\\n",
    "         'ring', 'sprikn', 'soring', 'sprimg', 'apring', 's[romg', 'srping']\n",
    "fall = ['fall', 's1', 'fa;;', 'fal', 'fa15', 'fa14', 'fallo', 'fall1', 'sem1', 'falll', 'sem 1', 'sem2', 'sem 2', 'fal1', 'fallk', 'flall', 'fal15', \\\n",
    "        'fakk', 'fll', 'fa;ll', \"fall'\", 'd|fall', 'fasll', 'falls', 'fa10', 'fa', 'all', 'f', '1 s', 's-1']\n",
    "summer = ['sum', 'summer', 'sumr', 'summ', 'summr', 'ssum', 'summe', 'sum 1', '1 sum', '2 sum', 'sum 2', 'sum1', 'sum ii', 'sum i', 'sum2', '2sum', \\\n",
    "          'sum sc', 'su', '1sum', 'sun', '1 summ', 'su15', 'sumi', 'su16', 'su 15', '1  sum',]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Irene\n",
    "\n",
    "# a dictionary that records the term assignment\n",
    "semester_type_adj = {np.NaN: np.NaN}\n",
    "semester_type_adj.update({s:'spring' for s in spring})\n",
    "semester_type_adj.update({s:'fall' for s in fall})\n",
    "semester_type_adj.update({s:'summer' for s in summer})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Irene\n",
    "\n",
    "# replace the typos\n",
    "df['semester_type'].replace(semester_type_adj, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### **3. Semester_Type: Change Unidentifiable Values**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>semester_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>NaN</td>\n",
       "      <td>5758546</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>fall</td>\n",
       "      <td>2747142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>spring</td>\n",
       "      <td>2681336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>summer</td>\n",
       "      <td>35218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Unknown</td>\n",
       "      <td>5143</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         semester_type\n",
       "NaN            5758546\n",
       "fall           2747142\n",
       "spring         2681336\n",
       "summer           35218\n",
       "Unknown           5143"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Irene\n",
    "\n",
    "# assign the unidentifiable values to \"unknown\"\n",
    "unchange_sem = list(set(semester_type_adj.values()))\n",
    "df['semester_type'] = df['semester_type'].transform(lambda x: 'Unknown' if x not in unchange_sem else x)\n",
    "pd.DataFrame(data=df['semester_type'].value_counts(dropna=False))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### **4. Course_Letter_Grade: Merge Values**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60\n",
      "['A', 'B', 'C', 'P', 'D', 'F', 'D-', 'W', 'NC', 'W/P', 'W/F', 'N/C', 'U', 'I', 'W/D', 'C-', 'AUD', 'B-', 'N', 'A-', 'C+', 'D+', 'B+', 'A+', 'WAV', '0', 'NM', 'NG', 'NR', 'IP', 'NP', 'IN', 'AU', 'WF', 'E', 'INC', 'CR', 'RPT', 'LC', 'R', nan, 'WD', 'WP', 'RP', 'O', 'I NC', 'S', 'AC', 'D(NC)', \"A'\", 'NS', 'G', 'V', '6', 'INF', 'DC', 'N/P', '9', 'CREDIT', 'WITHDREW']\n"
     ]
    }
   ],
   "source": [
    "# Irene\n",
    "\n",
    "# show the unique values\n",
    "letter_grade_type = [s for s in df['course_letter_grade'].unique()]\n",
    "print(len(letter_grade_type))\n",
    "print(letter_grade_type)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Irene\n",
    "\n",
    "# lists of values that should be merged to the specific grades\n",
    "A = ['A', 'A-', 'A+', 'E', 'O', \"A'\", 'G']\n",
    "B = ['B', 'B-', 'B+', 'S']\n",
    "C = ['C', 'C-', 'C+', 'N']\n",
    "D = ['D', 'D-', 'D+', 'CREDIT', 'D(NC)']\n",
    "F = ['F', 'U'] # fail\n",
    "P = ['P'] # pass\n",
    "AU = ['AUD', 'AU'] # audit\n",
    "NP = ['NP', 'N/P', 'NC', 'N/C'] # not pass\n",
    "W = ['WITHDREW', 'WF', 'W/P', 'W/F', 'W', 'W/D', 'WD', 'WP'] # withdraw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Irene\n",
    "\n",
    "# a dictionary that records the grade assignment\n",
    "letter_grade_type_adj = {np.NaN: np.NaN}\n",
    "letter_grade_type_adj.update({g:'A' for g in A})\n",
    "letter_grade_type_adj.update({g:'B' for g in B})\n",
    "letter_grade_type_adj.update({g:'C' for g in C})\n",
    "letter_grade_type_adj.update({g:'D' for g in D})\n",
    "letter_grade_type_adj.update({g:'F' for g in F})\n",
    "letter_grade_type_adj.update({g:'P' for g in P})\n",
    "letter_grade_type_adj.update({g:'NP' for g in NP})\n",
    "letter_grade_type_adj.update({g:'W' for g in W})\n",
    "letter_grade_type_adj.update({g:'AU' for g in AU})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Irene\n",
    "\n",
    "# replace the values\n",
    "df['course_letter_grade'].replace(letter_grade_type_adj, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### **5. Course_Letter_Grade: Change Unidentifiable Values**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>course_letter_grade</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>A</td>\n",
       "      <td>3206141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>B</td>\n",
       "      <td>2869853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>C</td>\n",
       "      <td>2224739</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>D</td>\n",
       "      <td>1331572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>F</td>\n",
       "      <td>858331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>P</td>\n",
       "      <td>642126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>NP</td>\n",
       "      <td>45823</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>W</td>\n",
       "      <td>27443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Unknown</td>\n",
       "      <td>16063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>NaN</td>\n",
       "      <td>4155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>AU</td>\n",
       "      <td>1139</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         course_letter_grade\n",
       "A                    3206141\n",
       "B                    2869853\n",
       "C                    2224739\n",
       "D                    1331572\n",
       "F                     858331\n",
       "P                     642126\n",
       "NP                     45823\n",
       "W                      27443\n",
       "Unknown                16063\n",
       "NaN                     4155\n",
       "AU                      1139"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Irene\n",
    "\n",
    "# assign the unidentifiable values to \"unknown\"\n",
    "unchange_grade = list(set(letter_grade_type_adj.values()))\n",
    "df['course_letter_grade'] = df['course_letter_grade'].transform(lambda x: 'Unknown' if x not in unchange_grade else x)\n",
    "pd.DataFrame(data=df['course_letter_grade'].value_counts(dropna=False))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "study_id\n",
      "[1.11152000e+05 1.11154000e+05 1.11158000e+05 ... 1.82526131e+15\n",
      " 1.82541518e+14 1.52126153e+14]\n",
      "\n",
      "district\n",
      "[1 2 3 4 5]\n",
      "\n",
      "school_year\n",
      "[2017. 2015. 2016. 2018. 2019. 2013. 2014. 2011. 2012. 2010. 2009. 2008.\n",
      " 2007. 2006. 2005. 2020. 2003. 2004. 1999.   nan]\n",
      "\n",
      "semester_type\n",
      "['spring' 'fall' 'summer' nan 'Unknown']\n",
      "\n",
      "course_id\n",
      "['PE502' 'MA271' 'AR40' ... 'ABC 121-0006 (40141)' 'AJS 230' 'AJS 275']\n",
      "\n",
      "course_title\n",
      "['AA Interscholastic Athletics (Sports)' 'Algebra I'\n",
      " 'Beginning Stained Glass' ... 'FireFight/EMS(Function of Cammand)'\n",
      " 'FireFight/EMS(Firegorund Survival)' 'FireFight/EMS(Precalculus)']\n",
      "\n",
      "course_letter_grade\n",
      "['A' 'B' 'C' 'P' 'D' 'F' 'W' 'NP' 'Unknown' 'AU' nan]\n",
      "\n",
      "course_number_grade\n",
      "[nan 16. 21.  3. 14.  2. 11.  4.  1.  0.]\n",
      "\n",
      "ib_indicator\n",
      "[nan  1.  0.]\n",
      "\n",
      "ap_indicator\n",
      "[nan  1.  0.]\n",
      "\n",
      "cte_indicator\n",
      "[nan  1.  0.]\n",
      "\n",
      "de_indicator\n",
      "[nan  1.  0.]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Irene\n",
    "for c in df.columns:\n",
    "    print(c)\n",
    "    print(df[c].unique())\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Irene\n",
    "\n",
    "# save file\n",
    "df.to_csv('allcourses_new.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Irene"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Irene"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
